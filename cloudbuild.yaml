# Google Cloud Build Pipeline Configuration
# This pipeline is automatically triggered on every push to the main branch
# It builds the Docker image, updates the backend service and jobs, and runs migrations

steps:
  # Step 1: Pull the latest image from Artifact Registry for caching
  # This speeds up the build process by reusing layers from the previous build
  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      [
        "-c",
        "docker pull ${_ARTIFACT_REGISTRY}/devfest-lecce-backend:latest || exit 0",
      ]

  # Step 2: Build the Docker image with caching
  # Uses the previously pulled image as cache to speed up the build
  - name: "gcr.io/cloud-builders/docker"
    args:
      [
        "build",
        "-t",
        "${_ARTIFACT_REGISTRY}/devfest-lecce-backend:latest",
        "--cache-from",
        "${_ARTIFACT_REGISTRY}/devfest-lecce-backend:latest",
        ".",
      ]

  # Step 3: Push the newly built image to Artifact Registry
  # This makes the image available for Cloud Run deployment
  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "${_ARTIFACT_REGISTRY}/devfest-lecce-backend:latest"]

  # Step 4: Update the Cloud Run Job with the new image
  # The job is used to run database migrations and collect static files
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: gcloud
    args:
      - "run"
      - "jobs"
      - "update"
      - "devfest-lecce-be-job"
      - "--image=${_ARTIFACT_REGISTRY}/devfest-lecce-backend:latest"
      - "--region=${_SERVICE_REGION}"

  # Step 5: Execute the job to collect static files
  # This runs the Django collectstatic command to gather all static files
  # Static files are stored in Google Cloud Storage
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: gcloud
    args:
      - "run"
      - "jobs"
      - "execute"
      - "devfest-lecce-be-job"
      - "--update-env-vars=TASK=collectstatic"
      - "--region=${_SERVICE_REGION}"

  # Step 6: Execute the job to run database migrations
  # This applies any pending Django migrations to the database
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: gcloud
    args:
      - "run"
      - "jobs"
      - "execute"
      - "devfest-lecce-be-job"
      - "--update-env-vars=TASK=migrate"
      - "--region=${_SERVICE_REGION}"

  # Step 7: Deploy the new image to Cloud Run service
  # This updates the backend API service with the new image
  # Cloud Run automatically handles zero-downtime deployment
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: gcloud
    args:
      - "run"
      - "services"
      - "update"
      - "devfest-lecce-be"
      - "--image=${_ARTIFACT_REGISTRY}/devfest-lecce-backend:latest"
      - "--region=${_SERVICE_REGION}"

# Images to be stored in Artifact Registry
images:
  - "${_ARTIFACT_REGISTRY}/devfest-lecce-backend:latest"

# Build options
options:
  # Use Cloud Logging for better log management and debugging
  logging: CLOUD_LOGGING_ONLY

